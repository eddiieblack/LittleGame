{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","game","default","serializable","getPlayerDistance","playerPos","player","getPosition","dist","pDistance","node","position","onPicked","spawnNewStar","gainScore","destroy","start","update","dt","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACAC,oBAAY,CAjBL;AAkBP;AACAC,cAAM;AACFC,qBAAS,IADP;AAEFC,0BAAc;AAFZ;AAnBC,KAHP;;AA4BL;;AAEA;AACAC,uBAAmB,6BAAY;AAC3B;AACA,YAAIC,YAAY,KAAKJ,IAAL,CAAUK,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,YAAIC,OAAOb,GAAGc,SAAH,CAAa,KAAKC,IAAL,CAAUC,QAAvB,EAAiCN,SAAjC,CAAX;AACA,eAAOG,IAAP;AACH,KArCI;;AAuCLI,cAAU,oBAAW;AACjB;AACA,aAAKX,IAAL,CAAUY,YAAV;AACC;AACA,aAAKZ,IAAL,CAAUa,SAAV;AACD;AACA,aAAKJ,IAAL,CAAUK,OAAV;AACH,KA9CI;;AAgDLC,SAhDK,mBAgDI,CAER,CAlDI;;;AAoDLC,YAAO,gBAAUC,EAAV,EAAc;AAChB;AACA,YAAI,KAAKd,iBAAL,KAA2B,KAAKJ,UAApC,EAAgD;AAC7C;AACA,iBAAKY,QAAL;AACA;AACH;AACD;AACA,YAAIO,eAAe,IAAI,KAAKlB,IAAL,CAAUmB,KAAV,GAAgB,KAAKnB,IAAL,CAAUoB,YAAjD;AACA,YAAIC,aAAa,EAAjB;AACA,aAAKZ,IAAL,CAAUa,OAAV,GAAoBD,aAAaE,KAAKC,KAAL,CAAWN,gBAAgB,MAAMG,UAAtB,CAAX,CAAjC;AACH;AA/DI,CAAT","file":"Star.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n         // 星星和主角之间的距离小于这个数值时，就会完成收集\n         pickRadius: 0,\n         // 暂存 Game 对象的引用\n         game: {\n             default: null,\n             serializable: false\n         }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n         // 调用 Game 脚本的得分方法\n         this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    },\n\n    start () {\n\n    },\n\n    update:function (dt) {\n         // 每帧判断和主角之间的距离是否小于收集距离\n         if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n});\n"]}